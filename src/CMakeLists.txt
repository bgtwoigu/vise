cmake_minimum_required( VERSION 2.6 )
project( relja_retrieval )


set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../forbuild/")


MACRO(MY_EVAL_CONDITION name)
   IF(${ARGN})
     SET(${name} 1)
   ELSE(${ARGN})
     SET(${name} 0)
   ENDIF(${ARGN})
ENDMACRO(MY_EVAL_CONDITION)

MY_EVAL_CONDITION( ISTITAN $ENV{HOSTNAME} MATCHES "headnode1.*|comp.*" )
MY_EVAL_CONDITION( ISZEUS $ENV{HOSTNAME} MATCHES "zeus" )
MY_EVAL_CONDITION( ISSANDS $ENV{HOSTNAME} MATCHES "sands" )
MY_EVAL_CONDITION( ISLAPTOP $ENV{HOSTNAME} MATCHES "Relja-laptop|relja-ThinkPad-T410" )
MY_EVAL_CONDITION( ISARTHUR2 $ENV{HOSTNAME} MATCHES "arthur2" )

MY_EVAL_CONDITION( NOTTITAN NOT ISTITAN )

message("hostname: " $ENV{HOSTNAME})



MACRO(MY_OPTION name description value)
   IF(${value})
     OPTION(${name} description ON)
   ELSE(${value})
     OPTION(${name} description 0FF)
   ENDIF(${value})
ENDMACRO(MY_OPTION)



############################## MPI settings

MY_OPTION( cMPI "MPI support" ISTITAN )


if (cMPI)
    message("=========================== MPI: ON")
    ADD_DEFINITIONS(-DRR_MPI)
    set( REQURE_BOOST_MPI "mpi" )
else (cMPI)
    message("=========================== MPI: OFF")
endif (cMPI)



############################## Registration

MY_OPTION( cREGISTER "Registration" NOTTITAN )

if (cREGISTER)
    message("=========================== Registration: ON")
    ADD_DEFINITIONS(-DRR_REGISTER)
else (cREGISTER)
    message("=========================== Registration: OFF")
endif (cREGISTER)

MY_EVAL_CONDITION( cREQUIRE_MAGICK cREGISTER )



############################## James's FASTANN

## James's FASTANN (download from robots/software)
#find_package(fastann REQUIRED)
#include_directories( ${fastann_INCLUDE_DIRS} )
## source: forbuild/Findfastann.cmake
find_path(fastann_INCLUDE_DIR
  NAMES fastann.hpp
  PATH_SUFFIXES fastann
  DOC "The directory where fastann.hpp resides")

find_library(fastann_LIBRARY
  NAMES fastann
  DOC "The fastann library")

# handle the QUIETLY and REQUIRED arguments and set FASTANN_FOUND to TRUE if 
# all listed variables are TRUE
include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(fastann DEFAULT_MSG fastann_LIBRARY fastann_INCLUDE_DIR)

if (FASTANN_FOUND)
  set(fastann_LIBRARIES ${fastann_LIBRARY})
  set(fastann_INCLUDE_DIRS ${fastann_INCLUDE_DIR})
endif(FASTANN_FOUND)

mark_as_advanced(
  fastann_INCLUDE_DIR
  fastann_LIBRARY)
include_directories( ${fastann_INCLUDE_DIRS} )


############################## Magick++

if (cREQUIRE_MAGICK)

    message("=========================== Magick++: Required")

    find_package( ImageMagick COMPONENTS Magick++ REQUIRED )

else (cREQUIRE_MAGICK)

    find_package( ImageMagick COMPONENTS Magick++ )

endif (cREQUIRE_MAGICK)

if (ImageMagick_FOUND)
    include_directories( ${ImageMagick_INCLUDE_DIRS} )
    ADD_DEFINITIONS(-DRR_MAGICK)
else (ImageMagick_FOUND)
    message("Magick++ was not found, but is really recommended (if not required)")
endif (ImageMagick_FOUND)



############################## Protocol Buffer

include(FindProtobuf)
find_package( Protobuf REQUIRED )
include_directories( ${PROTOBUF_INCLUDE_DIR} )




############################## Titan settings

if ( ISTITAN )

    ## Boost
    set(BOOST_ROOT "/opt/gridware/pkg/libs/boost/1.51.0/gcc-4.4.6+openmpi-1.6.3/")
    set(Boost_NO_SYSTEM_PATHS "TRUE")

    if (cMPI)
        include_directories("/opt/gridware/pkg/mpi/openmpi/1.6.3/gcc-4.4.6/include/")
    endif (cMPI)

    ## should fix this HACK
    ADD_DEFINITIONS(-DISTITAN)

endif ( ISTITAN )

############################## Zeus settings

# if ( ISZEUS )
#     # needed for 1.46.1
#     set(BOOST_ROOT "/opt/boost1.46.1/")
#     # do not link against system boost (old) libs
#     SET(Boost_NO_SYSTEM_PATHS "TRUE")
# endif ( ISZEUS )

############################## Sands settings

if ( NOTTITAN )
    if (cMPI)
        set( MPI_LIBRARIES "mpi" "mpi_cxx" )
        include_directories( /usr/lib/openmpi/include )
    endif (cMPI)
endif ( NOTTITAN )







############################## autogenerated files

if (cREGISTER)
    set( RR_REGISTER_PY "True")
else (cREGISTER)
    set( RR_REGISTER_PY "False")
endif (cREGISTER)

set( RR_SEND_COMMENTS_PY "False" )
set( RR_AUTO_EMAIL_PASS_PY "replacethis" )
CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/ui/web/webserver.cmake.py ${CMAKE_SOURCE_DIR}/ui/web/webserver.py )
CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/ui/web/send_comments.cmake.py ${CMAKE_SOURCE_DIR}/ui/web/send_comments.py )




# SET( CMAKE_VERBOSE_MAKEFILE on )


############################## Boost


find_package(Boost 1.44.0 COMPONENTS ${REQURE_BOOST_MPI} filesystem system thread date_time atomic timer REQUIRED)

link_directories( ${Boost_LIBRARY_DIRS} )
include_directories( ${Boost_INCLUDE_DIRS} )





##############################

message("Boost_LIBRARIES: " ${Boost_LIBRARIES})
message("Boost_INCLUDE_DIRS: " ${Boost_INCLUDE_DIRS})
message("ImageMagick_LIBRARIES: " ${ImageMagick_LIBRARIES} )
message("ImageMagick_INCLUDE_DIRS: " ${ImageMagick_INCLUDE_DIRS} )
message("PROTOBUF_INCLUDE_DIR: " ${PROTOBUF_INCLUDE_DIR} )
message("PROTOBUF_LIBRARIES: " ${PROTOBUF_LIBRARIES} )
message("fastann_INCLUDE_DIRS: " ${fastann_INCLUDE_DIRS})
message("fastann_LIBRARIES: " ${fastann_LIBRARIES} )



############################## Normal stuff


# Change this to OFF to build binaries for redistribution
set( BUILD_SHARED_LIBS "ON" )
# set( BUILD_SHARED_LIBS "OFF" )



#set( CMAKE_CXX_FLAGS "-Wall -DEIGEN_NO_DEBUG -O2 -g3 -msse2 -mpopcnt")
#set( CMAKE_CXX_FLAGS "-Wall -DEIGEN_NO_DEBUG -O2 -g3 -msse2 -mpopcnt -DMAGICKCORE_QUANTUM_DEPTH=16 -DMAGICKCORE_HDRI_ENABLE=1")

set( CMAKE_CXX_FLAGS "-Wall -DEIGEN_NO_DEBUG -std=c++11 -O2 -msse2 -mpopcnt -DMAGICKCORE_QUANTUM_DEPTH=16 -DMAGICKCORE_HDRI_ENABLE=1")
#set( CMAKE_CXX_FLAGS "-Wall -DEIGEN_NO_DEBUG -std=c++11 -g3 -msse2 -mpopcnt -DMAGICKCORE_QUANTUM_DEPTH=16 -DMAGICKCORE_HDRI_ENABLE=1")

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.7.1")
    # -Wno-unused-local-typedefs is just for EIGEN and more recent g++
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -unused-local-typedefs")
  endif()
endif()

# set( CMAKE_CXX_FLAGS "-Wall -Wno-unused-local-typedefs -DEIGEN_NO_DEBUG -O0 -g3")


set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_executable( vise vise.cc )
target_link_libraries( vise ViseServer ${ImageMagick_LIBRARIES} ${Boost_LIBRARIES})

include_directories( api )
include_directories( compression )
include_directories( evaluation )
include_directories( external )
include_directories( external/libsvm )
include_directories( external/eigen )
include_directories( external/KMCode_relja/exec/detect_points )
include_directories( external/KMCode_relja/exec/compute_descriptors )
include_directories( preprocessing )
include_directories( indexing )
include_directories( matching )
include_directories( matching/det_ransac )
include_directories( matching/registration )
include_directories( nn )
include_directories( represent )
include_directories( retrieval )
include_directories( tests )
include_directories( util )
include_directories( v2/api )
include_directories( v2/dataset )
include_directories( v2/embedding )
include_directories( v2/evaluation )
include_directories( v2/indexing )
include_directories( v2/indexing/train )
include_directories( v2/retrieval )
include_directories( server )

# for protobufs
include_directories( ${PROJECT_BINARY_DIR}/util )
include_directories( ${PROJECT_BINARY_DIR}/v2/dataset )
include_directories( ${PROJECT_BINARY_DIR}/v2/embedding )
include_directories( ${PROJECT_BINARY_DIR}/v2/evaluation )
include_directories( ${PROJECT_BINARY_DIR}/v2/indexing )
include_directories( ${PROJECT_BINARY_DIR}/v2/retrieval )


add_subdirectory( api )
add_subdirectory( compression )
add_subdirectory( evaluation )
add_subdirectory( external )
add_subdirectory( indexing )
add_subdirectory( matching )
add_subdirectory( nn )
add_subdirectory( preprocessing )
add_subdirectory( represent )
add_subdirectory( retrieval )
add_subdirectory( tests )
add_subdirectory( util )
add_subdirectory( v2 )
add_subdirectory( server )
